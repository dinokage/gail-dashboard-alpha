// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}


enum Role {
  DRAFTSMAN
  UPLOAD
  GAIL
}


model User {
  id            String    @id @default(cuid())
  name          String?
  email         String?   @unique
  password      String?
  role          Role   @default(DRAFTSMAN)
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
  accounts      Account[]
  sessions      Session[]
}

model Account {
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt
  user              User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@id([provider, providerAccountId])
}

model Session {
  sessionToken String   @unique
  userId       String
  expires      DateTime
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Drawing {
    id           String   @id @default(uuid())
    bucket       String
    fileName     String   @unique
    originalName String
    createdAt    DateTime @default(now())
    size         Int
    stationId    String   // Added: Link to Station
    station      Station  @relation(fields: [stationId], references: [id], onDelete: Cascade) // Added: Relation to Station
}

model Region {
  id        String    @id @default(cuid())
  name      String    @unique // Assuming region names should be unique
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  stations  Station[]
}

model Station {
  id        String   @id @default(cuid())
  name      String
  regionId  String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  region    Region   @relation(fields: [regionId], references: [id], onDelete: Cascade) // Assuming cascade delete for stations if region is deleted
  drawings  Drawing[] // Added: Relation to Drawings

  @@unique([name, regionId]) // Ensure station names are unique within a region
}